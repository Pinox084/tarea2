package a;
import java.util.ArrayList;


abstract class Bebida{
    public Bebida(){
    }
    public String beber(){
        return "sabor: ";
    }
}
class Sprite extends Bebida{
    public Sprite(){
    }
    @Override
    public String beber(){
        return super.beber()+"sprite";
    }
}
class CocaCola extends Bebida{
    public CocaCola(){
    }
    @Override
    public String beber(){
        return super.beber()+"cocacola";
    }
}
class Fanta extends Bebida{
    public Fanta(){
    }
    @Override
    public String beber(){
        return super.beber()+"fanta";
    }
}
class Mineral extends Bebida{
    public Mineral(){
    }
    @Override
    public String beber(){
        return super.beber()+"agua mineral";
    }
}

class Deposito {

    private ArrayList<Bebida> derp;

    public Deposito() {

        derp = new ArrayList();
    }

    public void addBebida(Bebida esta) {

        derp.add(esta);
    }

    public Bebida getBebida() {
        if (derp.size() == 0) {
            return null;
        }
        Bebida b = derp.remove(0);

        return b;
    }

}
class Depocoin{

    private ArrayList<Moneda> monedero;

    public Depocoin() {

        monedero = new ArrayList();
    }

    
    public void returncoin(Moneda coin){
        monedero.add(coin);
    }
    public void newCoin() {
        
        monedero.add(new Moneda100());
    }
    
    public Moneda getCoin() {
        if (monedero.size() == 0) {
            return null;
        }
        Moneda x = monedero.remove(0);

        return x;
    }

}
class Expendedora{
    
    Deposito Coca;
    Deposito Spritex;
    Deposito Mine;
    Deposito Fantax;
    Depocoin caja;
    
    int precioCoca;
    int precioSprite;
    int precioMine;
    int precioFanta;
    
    
    public Expendedora(int cantidad, int precioCoca, int precioSprite, int precioFanta, int precioMineral){
        
        Coca = new Deposito();
        Spritex = new Deposito();
        Mine = new Deposito();
        Fantax = new Deposito();
        caja = new Depocoin();
        
        for (int i = 0; i < cantidad; i++) {
            Coca.addBebida(new CocaCola());
        }
        for (int i = 0; i < cantidad; i++) {
            Spritex.addBebida(new Sprite());
        }
        for (int i = 0; i < cantidad; i++) {
            Mine.addBebida(new Mineral());
        }
        for (int i = 0; i < cantidad; i++) {
            Fantax.addBebida(new Fanta());
        }
        
    }
    
    public Bebida comprarBebida(Moneda coin, int seleccion) throws PagoInsuficienteException, PagoIncorrectoException, NoHayBebidaException{
        
        Bebida b = null;
        switch(seleccion){
            
            case default: 
                caja.returncoin(coin);
                throw new NoHayBebidaException("Seleccion Incorrecta"); 
            case 1:
                
                if(checkprice(coin, precioCoca) == true){
                    b = Coca.getBebida();
                    if(b == null){
                        throw new NoHayBebidaException("No Disponible en este momento");
                    }
                    llenarVuelto(coin, precioCoca);
                    return b;
                }
                
            case 2:
                if(checkprice(coin, precioFanta) == true){
                    b = Fantax.getBebida();
                    if(b == null){
                        throw new NoHayBebidaException("No Disponible en este momento");
                    }
                    llenarVuelto(coin, precioFanta);
                    return b;
                }
                
            case 3:
                if(checkprice(coin, precioSprite) == true){
                    b = Spritex.getBebida();
                    if(b == null){
                        throw new NoHayBebidaException("No Disponible en este momento");
                    }
                    llenarVuelto(coin, precioSprite);
                    return b ;
                }
            
            case 4:
                if(checkprice(coin, precioMine) == true){
                    b = Mine.getBebida();
                    if(b == null){
                        throw new NoHayBebidaException("No Disponible en este momento");
                    }
                    llenarVuelto(coin, precioMine);
                    return b;
                }
            
               
        }
        System.out.println("Bandera");
        return null;
    }
    
    public boolean checkprice(Moneda coin, int precio) throws PagoInsuficienteException, PagoIncorrectoException {
        
        if(coin == null){
            throw new PagoIncorrectoException("Moneda no Ingresada");
        }
        if(coin.getValor() >= precio){
            return true;
        }else{
            caja.returncoin(coin);
            throw new PagoInsuficienteException("Pago Insuficiente");
            
        }
        
    }
    
    public void llenarVuelto(Moneda coin, int eleccion){
        int p = (eleccion - coin.getValor()) / 100;
        for (int i = 0; i < p; i++) {
            caja.newCoin();
        }
    }
    public Moneda getVuelto(){
        return caja.getCoin();
    }
    
}

class Comprador{
    private int vuelto;
    private String sabor;
    
    
    public Comprador(Expendedora quiosco, Moneda coin, int seleccion){
        Bebida botella = null;
        vuelto = 0;
        Moneda x;
        try{
            botella = quiosco.comprarBebida(coin, seleccion);
            sabor = botella.beber();
        }catch(PagoIncorrectoException e){
            System.out.println(e.getMessage());
            sabor = null;
        }catch(PagoInsuficienteException e){
            System.out.println(e.getMessage());
            sabor = null;
        }catch (NoHayBebidaException e){
            System.out.println(e.getMessage());
            sabor = null;
        }
        do{
            x = quiosco.getVuelto();
            if(x != null){
                vuelto = vuelto + x.getValor();
            }
            
        }while(x != null);
        
        
    }
    public String getSabor(){
        return sabor;
    }
    public int cuantoVuelto(){
        return vuelto;
    }
}
public class A {
    
    
    
    public static void main(String[] args) {
       
        Expendedora prueba = new Expendedora(2,600,700,500,400);
        Moneda1000 billete = new Moneda1000();
        Comprador jimmy = new Comprador(prueba, billete, 2);
        System.out.println(jimmy.getSabor());
        System.out.println(jimmy.cuantoVuelto());
    }
    
}
